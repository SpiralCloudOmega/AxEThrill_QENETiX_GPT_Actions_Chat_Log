name: Continuous Agents

on:
  push:
    paths:
      - 'logs/**/*.md'
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

permissions:
  contents: write
  actions: read

concurrency:
  group: continuous-agents-${{ github.ref }}
  cancel-in-progress: false

jobs:
  fast-agent:
    name: Fast RAG / Provider Agent
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: site/package-lock.json

      - name: Cache node_modules (fallback)
        id: node-cache
        uses: actions/cache@v4
        with:
          path: |
            site/node_modules
          key: node-mod-${{ runner.os }}-${{ hashFiles('site/package-lock.json') }}
          restore-keys: |
            node-mod-${{ runner.os }}-

      - name: Install deps (if no cache)
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: |
          cd site
          npm ci || npm i

      - name: Prebuild
        run: |
          cd site
          node scripts/prebuild.mjs

      - name: Detect provider (prefer gemini)
        id: detect
        run: |
          set -e
          if [ -n "$AI_PROVIDER_FORCE" ]; then
            echo "Forced provider via AI_PROVIDER_FORCE=$AI_PROVIDER_FORCE"
            echo "provider=$AI_PROVIDER_FORCE" >> $GITHUB_OUTPUT
            exit 0
          fi
            prov="rag"
          if [ -n "${{ secrets.GEMINI_API_KEY }}" ]; then prov="gemini"; fi
          if [ "$prov" = "rag" ] && [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then prov="openai"; fi
          echo "provider=$prov" >> $GITHUB_OUTPUT
          echo "Using provider: $prov"

      - name: Determine changed logs & estimate tokens
        id: changes
        run: |
          set -e
          STATE_FILE=logs/memory/agent-state/continuous-state.json
          mkdir -p logs/memory/agent-state
          LAST=""
          if [ -f "$STATE_FILE" ]; then LAST=$(jq -r '.lastCommit // ""' "$STATE_FILE" 2>/dev/null || echo ""); fi
          if [ -n "$LAST" ]; then
            LIST=$(git diff --name-only $LAST..HEAD -- 'logs/**/*.md')
          else
            LIST=$(git ls-files 'logs/**/*.md')
          fi
          CHANGED=$(echo "$LIST" | grep -c ".md" || true)
          TOTAL_CHARS=0
          for f in $LIST; do
            [ -f "$f" ] || continue
            SIZE=$(wc -c < "$f")
            TOTAL_CHARS=$((TOTAL_CHARS + SIZE))
          done
          TOKENS=$((TOTAL_CHARS / 4))
          echo "changedCount=$CHANGED" >> $GITHUB_OUTPUT
          echo "approxTokens=$TOKENS" >> $GITHUB_OUTPUT
          echo '{"lastCommit":"'$(git rev-parse HEAD)'","approxTokens":'$TOKENS',"changed":'$CHANGED'}' > $STATE_FILE
          echo "State written: $STATE_FILE (changed=$CHANGED tokens~$TOKENS)"

      - name: Token ledger & quota
        id: ledger
        run: |
          set -e
          LEDGER_FILE=logs/memory/agent-state/token-ledger.json
          mkdir -p logs/memory/agent-state
          TODAY=$(date -u +%Y-%m-%d)
          LIMIT=${TOKEN_DAILY_LIMIT:-500000}
          USED=0
          if [ -f "$LEDGER_FILE" ]; then
            USED=$(jq -r --arg d "$TODAY" '.days[$d] // 0' "$LEDGER_FILE" 2>/dev/null || echo 0)
          fi
          NEW=${{ steps.changes.outputs.approxTokens }}
          SHOULD_SKIP="false"
          if [ $((USED + NEW)) -gt $LIMIT ]; then
            SHOULD_SKIP="true"
            echo "Daily token limit exceeded (used=$USED new=$NEW limit=$LIMIT); will force rag provider."
          else
            if [ -f "$LEDGER_FILE" ]; then
              TMP=$(mktemp)
              jq --arg d "$TODAY" --argjson add $NEW '(.days[$d] |= ( . // 0 ) + $add) | .updatedAt=now' "$LEDGER_FILE" > $TMP || echo '{"days":{}}' > $TMP
              mv $TMP $LEDGER_FILE
            else
              echo '{"days":{"'$TODAY'":'$NEW'},"updatedAt":'$(date +%s)'}' > $LEDGER_FILE
            fi
            echo "Ledger updated (used was $USED, added $NEW)"
          fi
          echo "skipProvider=$SHOULD_SKIP" >> $GITHUB_OUTPUT
          echo "ledgerUsed=$USED" >> $GITHUB_OUTPUT
          echo "ledgerLimit=$LIMIT" >> $GITHUB_OUTPUT

      - name: Batch guard
        id: guard
        run: |
          LIMIT=${BATCH_GUARD_LIMIT:-150}
          CHANGED=${{ steps.changes.outputs.changedCount }}
          echo "Batch guard limit: $LIMIT changed: $CHANGED"
          if [ "$CHANGED" -gt "$LIMIT" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Too many changed logs ($CHANGED > $LIMIT); skipping run."
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Run agent summary
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AI_PROVIDER: ${{ steps.detect.outputs.provider }}
          APPROX_TOKENS: ${{ steps.changes.outputs.approxTokens }}
        run: |
          if [ "${{ steps.guard.outputs.skip }}" = "true" ]; then echo "Skipped by batch guard"; exit 0; fi
          if [ "${{ steps.ledger.outputs.skipProvider }}" = "true" ]; then export AI_PROVIDER=rag; fi
          set -e
          cd site
          echo "AI_PROVIDER=$AI_PROVIDER approxTokens=$APPROX_TOKENS"
          node scripts/agents/agent-zero.mjs -- "Continuous summary: identify newly added logs and propose up to 3 tiny actionable improvements." --route || echo "Agent soft-failed"

      - name: Rebuild memory index (light)
        run: |
          node site/scripts/ai-cli.mjs tool memory build || true

      - name: Auto-commit updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add site/public/memory-index.json logs/memory logs/incoming || true
          git diff --cached --quiet && echo "No changes" || git commit -m "chore(agent): continuous memory/index update" || true
          git push || true

      - name: Health snapshot info
        run: |
          if [ -f site/public/health.json ]; then echo '--- health.json'; cat site/public/health.json; fi

