import fs from 'node:fs';
import path from 'node:path';
import React from 'react';

// Simple server component reading token-metrics.json (written by scheduled workflow)
// Shows totals + rolling windows and a minimal sparkline.

type Metrics = {
  generatedAt: string;
  total: number;
  lastDay: number;
  days: Record<string, number>;
  rolling: { seven: number; thirty: number };
};

function readMetrics(): Metrics | null {
  try {
    const p = path.join(process.cwd(), 'public', 'token-metrics.json');
    if (!fs.existsSync(p)) return null;
    return JSON.parse(fs.readFileSync(p, 'utf8')) as Metrics;
  } catch {
    return null;
  }
}

function formatNum(n: number) {
  return n.toLocaleString();
}

function Sparkline({ points, height = 40 }: { points: number[]; height?: number }) {
  if (!points.length) return <div className="text-xs opacity-60">(no data)</div>;
  const max = Math.max(...points);
  const min = Math.min(...points);
  const norm = (v: number) => max === min ? height / 2 : (height - 2) - ((v - min) / (max - min)) * (height - 4);
  const d = points.map((p, i) => `${i === 0 ? 'M' : 'L'} ${i * 4} ${norm(p).toFixed(1)}`).join(' ');
  const w = Math.max(1, (points.length - 1) * 4);
  return (
    <svg width={w} height={height} className="overflow-visible">
      <path d={d} fill="none" stroke="#4fa3ff" strokeWidth={2} />
    </svg>
  );
}

export const metadata = {
  title: 'Token Metrics',
  description: 'Daily token usage & rolling windows generated by automation.'
};

export default function MetricsPage() {
  const metrics = readMetrics();
  if (!metrics) return <div className="p-6 space-y-4"><h1 className="text-2xl font-semibold">Token Metrics</h1><p>No token metrics file found yet. Wait for the scheduled workflow to generate <code>token-metrics.json</code>.</p></div>;

  const entries = Object.entries(metrics.days).sort(([a],[b]) => a.localeCompare(b));
  const last30 = entries.slice(-30);
  const points = last30.map(([,v]) => v as number);
  const lastDate = last30.at(-1)?.[0];

  return (
    <div className="p-6 space-y-6">
      <header className="space-y-2">
        <h1 className="text-2xl font-semibold tracking-tight">Token Metrics</h1>
        <p className="text-sm opacity-70">Aggregated daily token approximations from the token ledger. Generated: {new Date(metrics.generatedAt).toLocaleString()}</p>
      </header>
      <section className="grid gap-4 sm:grid-cols-2 lg:grid-cols-4">
        <Card label="Total Tokens" value={formatNum(metrics.total)} />
        <Card label="Last Day" value={formatNum(metrics.lastDay)} sub={lastDate} />
        <Card label="Rolling 7d" value={formatNum(metrics.rolling.seven)} />
        <Card label="Rolling 30d" value={formatNum(metrics.rolling.thirty)} />
      </section>
      <section className="space-y-3">
        <h2 className="font-medium">Last 30 Days Sparkline</h2>
        <div className="rounded-md border border-neutral-800 bg-neutral-950 p-3"><Sparkline points={points} /></div>
      </section>
      <section className="space-y-3">
        <h2 className="font-medium">Daily Breakdown</h2>
        <div className="overflow-x-auto">
          <table className="min-w-[420px] text-sm">
            <thead className="text-left opacity-70"><tr><th className="py-1 pr-4">Date</th><th className="py-1 pr-4">Tokens</th><th className="py-1 pr-4">% of 30d</th></tr></thead>
            <tbody>
              {last30.map(([d,v]) => {
                const pct = metrics.rolling.thirty ? ((Number(v)/metrics.rolling.thirty)*100).toFixed(1) : '0.0';
                return <tr key={d} className="border-t border-neutral-900"><td className="py-1 pr-4 font-mono">{d}</td><td className="py-1 pr-4">{formatNum(Number(v))}</td><td className="py-1 pr-4">{pct}%</td></tr>;
              })}
            </tbody>
          </table>
        </div>
      </section>
      <p className="text-xs opacity-60">Values are approximate (character count / 4 heuristic). Sparkline scale auto-normalized per view.</p>
    </div>
  );
}

function Card({ label, value, sub }: { label: string; value: string; sub?: string }) {
  return (
    <div className="rounded-md border border-neutral-800 bg-neutral-950 p-4 flex flex-col gap-1">
      <div className="text-xs uppercase tracking-wide opacity-60">{label}</div>
      <div className="text-lg font-semibold tabular-nums">{value}</div>
      {sub && <div className="text-[10px] opacity-50">{sub}</div>}
    </div>
  );
}
